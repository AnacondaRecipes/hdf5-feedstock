diff --git a/configure b/configure
index 5557893..45c3dbe 100755
--- a/configure
+++ b/configure
@@ -28089,6 +28089,13 @@ main ()
                 unsigned char       s2[8];
                 int                 ret = 1;
 
+#if defined __powerpc64__ && defined _LITTLE_ENDIAN
+           /* Don't bother checking on ppc64le, we know it'll work, and
+              that what hdf5 calls 'special algorithm' simply is
+              IBM ldouble 128 (i.e. two seperately scaled doubles).
+              The check below assumes big endian.  */
+           ret = 0;
+#endif
                 if(sizeof(long double) == 16 && sizeof(long) == 8) {
                     /*make sure the long double type has 16 bytes in size and
                      * 11 bits of exponent.  If it is,
@@ -28206,6 +28213,13 @@ main ()
                 unsigned char       s[16];
                 int                 flag=0, ret=1;
 
+#if defined __powerpc64__ && defined _LITTLE_ENDIAN
+           /* Don't bother checking on ppc64le, we know it'll work, and
+              that what hdf5 calls 'special algorithm' simply is
+              IBM ldouble 128 (i.e. two seperately scaled doubles).
+              The check below assumes big endian.  */
+           ret = 0;
+#endif
                 /*Determine if long double has 16 byte in size, 11 bit exponent, and
                  *the bias is 0x3ff */
                 if(sizeof(long double) == 16) {
diff --git a/test/dt_arith.c b/test/dt_arith.c
index 41fb49d..41d537f 100644
--- a/test/dt_arith.c
+++ b/test/dt_arith.c
@@ -3045,7 +3045,18 @@ test_conv_flt_1 (const char *name, int run_test, hid_t src, hid_t dst)
                         buf, saved, nelmts);
 #if H5_SIZEOF_LONG_DOUBLE!=H5_SIZEOF_DOUBLE && H5_SIZEOF_LONG_DOUBLE!=0
             } else if(src_type == FLT_LDOUBLE) {
-                 INIT_FP_SPECIAL(src_size, src_nbits, sendian, LDBL_MANT_DIG, dst_size,
+                size_t mant_dig = LDBL_MANT_DIG;
+                if (mant_dig >= src_nbits) {
+                    /* This happens for IBM long double in little endian.
+                       The macro LDBL_MANT_DIG says 106 mantissa bits, but the
+                       HDF5 detection code actually represents it as a normal 64bit
+                       double (52 bit mantissa) with the upper double being
+                       unspec bits (which is sort of okay as the testsuite
+                       wouldn't deal with that format correctly anyway).  So
+                       override the mantissa size.  */
+                    mant_dig = 52;
+                }
+                 INIT_FP_SPECIAL(src_size, src_nbits, sendian, mant_dig, dst_size,
                         buf, saved, nelmts);
 #endif
             } else
@@ -3705,7 +3716,18 @@ test_conv_int_fp(const char *name, int run_test, hid_t src, hid_t dst)
             INIT_FP_DENORM(long double, LDBL_MANT_DIG, src_size, src_nbits, sendian, dst_size,
                     buf, saved, nelmts);
         } else {
-            INIT_FP_SPECIAL(src_size, src_nbits, sendian, LDBL_MANT_DIG, dst_size, buf, saved, nelmts);
+           size_t mant_dig = LDBL_MANT_DIG;
+           if (mant_dig >= src_nbits) {
+               /* This happens for IBM long double in little endian.
+                  The macro LDBL_MANT_DIG says 106 mantissa bits, but the
+                  HDF5 detection code actually represents it as a normal 64bit
+                  double (52 bit mantissa) with the upper double being
+                  unspec bits (which is sort of okay as the testsuite
+                  wouldn't deal with that format correctly anyway).  So
+                  override the mantissa size.  */
+               mant_dig = 52;
+           }
+            INIT_FP_SPECIAL(src_size, src_nbits, sendian, mant_dig, dst_size, buf, saved, nelmts);
         }
 #endif
     } else
